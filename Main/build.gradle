plugins {

    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}

import java.nio.file.Files
import java.nio.file.Paths

/*
    TODO: Use the JObfuscator from the Toolkit source code
*/
import java.nio.charset.StandardCharsets;

class Obfuscator {

    private final String salt;

    Obfuscator(String salt) {

        this.salt = salt;
    }

    String obfuscate(String what) {

        String concatenated = what + salt
        return bytesToHex(concatenated.getBytes(StandardCharsets.UTF_8))
    }

    String deobfuscate(String what) {

        byte[] decodedBytes = hexToBytes(what)
        String decodedString = new String(decodedBytes, StandardCharsets.UTF_8)
        return decodedString.replace(salt, "")
    }

    private static String bytesToHex(byte[] bytes) {

        StringBuilder hexString = new StringBuilder(2 * bytes.length)
        for (byte b : bytes) {
            String hex = Integer.toHexString(0xff & b)
            if (hex.length() == 1) {
                hexString.append('0')
            }
            hexString.append(hex)
        }
        return hexString.toString()
    }

    private static byte[] hexToBytes(String hex) {

        int len = hex.length()
        byte[] data = new byte[len / 2]
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4)
                    + Character.digit(hex.charAt(i+1), 16))
        }
        return data
    }
}

/*
     The .zshrc / .bashrc example:

     export OBFUSCATION_SALT="your_secret_salt"

     export PROXY_LOCAL_ENABLED=true

     export PROXY_LOCAL_TEST="$(hostname | tr '[:upper:]' '[:lower:]')"
     export PROXY_LOCAL_PROD="milosvasic.local"

     export PROXY_LOCAL_TEST_PORT="8080"
     export PROXY_LOCAL_PROD_PORT="8080"

     export PROXY_LOCAL_TEST_USERNAME="test"
     export PROXY_LOCAL_PROD_USERNAME="admin"

     export PROXY_LOCAL_TEST_PASSWORD="test"
     export PROXY_LOCAL_PROD_PASSWORD="admin"

     export OBFUSCATION_TEST="test"
*/

def test = System.getenv("OBFUSCATION_TEST") ?: ""

def salt = System.getenv("OBFUSCATION_SALT") ?: ""
def obfuscator = new Obfuscator(salt)

def proxyEnabled = (System.getenv("PROXY_LOCAL_ENABLED") ?: "false").toBoolean()

def proxyLocalTest = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_TEST") ?: "127.0.0.1")
def proxyLocalTestPort = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_TEST_PORT") ?: "8080")
def proxyLocalTestUsername = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_TEST_USERNAME") ?: "test")
def proxyLocalTestPassword = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_TEST_PASSWORD") ?: "test")

def proxyLocalProd = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_PROD") ?: "127.0.0.1")
def proxyLocalProdPort = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_PROD_PORT") ?: "8080")
def proxyLocalProdUsername = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_PROD_USERNAME") ?: "admin")
def proxyLocalProdPassword = obfuscator.obfuscate(System.getenv("PROXY_LOCAL_PROD_PASSWORD") ?: "admin")

android {

    compileSdk 34
    namespace "com.redelf.commons"

    defaultConfig {

        minSdk 28
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        if (proxyEnabled) {

            resValue "string", "ob_proxy_local_test", proxyLocalTest
            resValue "string", "ob_proxy_local_prod", proxyLocalProd

            resValue "string", "ob_proxy_local_test_port", proxyLocalTestPort
            resValue "string", "ob_proxy_local_prod_port", proxyLocalProdPort

            resValue "string", "ob_proxy_local_test_username", proxyLocalTestUsername
            resValue "string", "ob_proxy_local_prod_username", proxyLocalProdUsername

            resValue "string", "ob_proxy_local_test_password", proxyLocalTestPassword
            resValue "string", "ob_proxy_local_prod_password", proxyLocalProdPassword
        }

        resValue "string", "ob_test", obfuscator.obfuscate(test)
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {

        jvmTarget = '1.8'
    }

    buildTypes {

        release {

            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'missing_rules.txt'
        }

        debug {

            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'missing_rules.txt'
        }
    }

    packagingOptions {

        exclude 'META-INF/*'
        exclude 'LICENSE-2.0.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    packagingOptions {

        resources {

            excludes += ['META-INF/*, LICENSE-2.0.txt, META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }

    lint {

        disable "Instantiatable"
        disable 'ContentDescription'
    }

    namespace 'com.redelf.commons'
}

dependencies {

    final String okioVersion = "3.9.0"
    final String okHttpVersion = "4.12.0"
    final String jacksonVersion = "2.12.5"
    final String lifecycleVersion = "2.8.3"
    final String retrofitHttpVersion = "2.11.0"

    api "com.squareup.okio:okio:$okioVersion"
    api "com.squareup.okhttp3:okhttp:$okHttpVersion"
    api "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    api "com.squareup.okhttp3:okhttp:$okHttpVersion"
    api "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    api "com.squareup.retrofit2:retrofit:$retrofitHttpVersion"
    api "com.squareup.retrofit2:converter-scalars:$retrofitHttpVersion"
    api "com.squareup.retrofit2:converter-gson:$retrofitHttpVersion"
    api "com.squareup.retrofit2:converter-jackson:$retrofitHttpVersion"

    api "com.squareup.retrofit2:adapter-rxjava2:$retrofitHttpVersion"
    api "io.reactivex.rxjava2:rxandroid:2.0.1"
    api "io.reactivex.rxjava2:rxjava:2.2.21"

    api "org.apache.commons:commons-compress:1.21"

    api "com.facebook.conceal:conceal:1.1.3@aar"

    api "androidx.core:core-ktx:1.13.1"
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0"
    api "com.google.firebase:firebase-core:21.1.1"
    api "com.google.firebase:firebase-auth:23.0.0"
    api "com.google.firebase:firebase-config:22.0.0"
    api "com.google.firebase:firebase-analytics:22.0.2"
    api "com.google.firebase:firebase-analytics-ktx:22.0.2"
    api "com.google.firebase:firebase-messaging:24.0.0"
    api "com.google.firebase:firebase-crashlytics:19.0.3"
    api "com.google.android.gms:play-services-auth:21.2.0"

    api "com.google.android.play:app-update:2.1.0"
    api "com.google.android.play:app-update-ktx:2.1.0"

    api "androidx.appcompat:appcompat:1.7.0"
    api "androidx.constraintlayout:constraintlayout:2.1.4"
    api "androidx.coordinatorlayout:coordinatorlayout:1.2.0"
    api "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-process:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-extensions:2.2.0"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    api "androidx.profileinstaller:profileinstaller:1.3.1"
    api "androidx.activity:activity-ktx:1.9.0"

    api "commons-codec:commons-codec:1.16.0"

    api "com.github.bumptech.glide:glide:4.16.0"
    api "com.github.bumptech.glide:annotations:4.16.0"

    api "jp.wasabeef:glide-transformations:4.3.0"

    api "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:3.0.0-RC3"

    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    api platform("com.google.firebase:firebase-bom:33.1.2")

    api "io.github.nefilim.kjwt:kjwt-core:0.9.0"
    api "io.github.nefilim.kjwt:kjwt-jwks:0.9.0"

    api "com.airbnb.android:lottie:5.2.0"
    api "androidx.work:work-runtime-ktx:2.9.0"
    api "androidx.preference:preference-ktx:1.2.1"
    api "com.google.android.material:material:1.12.0"
    api "androidx.navigation:navigation-ui-ktx:2.7.7"
    api "androidx.navigation:navigation-fragment-ktx:2.7.7"
    api "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    testImplementation project(":Toolkit:Test")

    testImplementation "junit:junit:4.13.2"

    androidTestImplementation project(":Toolkit:Test")
    androidTestImplementation "androidx.test:rules:1.6.1"
    androidTestImplementation "androidx.test.ext:junit:1.2.1"

    implementation "com.jakewharton.timber:timber:5.0.1"
    testImplementation "com.jakewharton.timber:timber:5.0.1"

    api "com.google.code.gson:gson:2.10.1"
    testApi "com.google.code.gson:gson:2.10.1"
    androidTestApi "com.google.code.gson:gson:2.10.1"
}

task downloadProxies(type: Exec) {

    def outputDir = file("$projectDir/src/main/res/raw")
    def outputFile = file("$outputDir/proxies.txt")

    doFirst {

        if (!outputDir.exists()) {

            outputDir.mkdirs()
        }
    }

    commandLine 'curl', '-sL', 'https://raw.githubusercontent.com/proxifly/free-proxy-list/main/proxies/protocols/http/data.txt', '-o', outputFile
}

task generateProxiesLocalTxt {
    doLast {

        def content = "http://${proxyLocalTestUsername}:${proxyLocalTestPassword}@${proxyLocalTest}:${proxyLocalTestPort}".stripIndent().trim()

        def filePath = "${projectDir}/src/androidTest/res/raw/proxies_local.txt"

        Files.write(Paths.get(filePath), content.getBytes())
        println "Generated proxies_local.txt at: ${filePath}"

        exec {

            commandLine 'git', 'add', filePath
        }

        try {

            exec {

                commandLine 'git', 'commit', '-m', 'Auto-generated proxies_local.txt'
            }

        } catch (Exception e) {

            println "Git commit command failed: ${e.message}"
        }

        try {

            exec {

                commandLine 'git', 'push'
            }

        } catch (Exception e) {

            println "Git push command failed: ${e.message}"
        }
    }
}

task startLocalProxyServer {
    doLast {

        try {

            exec {

                commandLine 'sh', "${rootDir}/Toolkit/Scripts/start_local_proxy_server.sh", "${rootDir}/Toolkit/Squid"
            }

        } catch (Exception e) {

            println "Shell script execution failed: ${e.message}"
        }
    }
}

task obtainAndWriteSalt {
    doLast {

        def content = "${salt}"
        def filePath = "${getRootDir()}/salt.txt"

        Files.write(Paths.get(filePath), content.getBytes())

        println "Generated salt.txt at: ${filePath}"
    }
}

preBuild.dependsOn obtainAndWriteSalt

if (proxyEnabled) {

    preBuild.dependsOn downloadProxies
    preBuild.dependsOn generateProxiesLocalTxt
    preBuild.dependsOn startLocalProxyServer
}
